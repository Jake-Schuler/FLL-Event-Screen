<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ .title }} - {{ .event_name }}</title>
    <link rel="stylesheet" href="/assets/assets/pico.min.css">
    <link rel="icon" type="image/x-icon" href="/static/logo.png">
</head>
<style>
    #actions {
        text-align: center;
        display: flex;
        flex-direction: row;
        justify-content: center;
        gap: 1rem;
        margin-top: 1rem;
        bottom: 10px;
        left: 50%;
        transform: translateX(-50%);
        position: absolute;
    }

    #current-match {
        text-align: center;
        margin-top: 1rem;
    }
</style>

<body class="container">
    <div
        style="text-align: center; margin-top: 1rem; display: flex; flex-direction: row; align-items: center; justify-content: center;">
        <img src="/static/logo.png" alt="Event Logo" style="height: 100px;" draggable="false">
        <h1>{{ .event_name }}</h1>
    </div>
    <select id="round-select">
        <option disabled selected="selected">Select Round</option>
        <option value="practice">Practice</option>
        <option value="round1">Round 1</option>
        <option value="round2">Round 2</option>
        <option value="round3">Round 3</option>
    </select>
    <div id="current-match">
        <h2 id="current-match-title">No match selected</h2>
        <p id="current-match-details"></p>
    </div>
    <div id="actions">
        <button id="previous-match">Previous Match</button>
        <button id="set-match">Set Match</button>
        <button id="next-match">Next Match</button>
    </div>
    <a href="/screen" target="_blank" style="bottom: 10px; right: 10px; position: fixed;">Open event screen</a>
    <select id="sound-select" style="position: fixed; bottom: 10px; left: 10px; width: 200px;">
        <option disabled selected="selected">Select Sound to Test</option>
        <option value="START">Start Sound</option>
        <option value="WARNING">Warning Sound</option>
        <option value="END">End Sound</option>
    </select>
    <script>
        var matches = [];
        var select = document.getElementById("round-select");
        var soundSelect = document.getElementById("sound-select");
        select.addEventListener("change", (event) => {
            var round = event.target.value;
            console.log("Selected round: " + round);
            socket.send(JSON.stringify({ "type": "get_info", "payload": round }));
        });
        var socket = new WebSocket((location.protocol === "http:" ? "ws://" : "wss://") + location.host + "/ws");
        socket.addEventListener("open", (event) => {
            console.log("WebSocket is open now.");
        });
        socket.addEventListener("message", (event) => {
            console.log("Message from server ", event.data);
            const message = JSON.parse(event.data);
            if (message.type === "matches") {
                matches = message.payload.sort((a, b) => a.match_num - b.match_num);
                showMatch(matches[0].match_num);
            }
        });
        function previousMatch(matchNum) {
            var currentIndex = matches.findIndex(m => m.match_num === matchNum);
            if (currentIndex > 0) {
                var previousMatchNum = matches[currentIndex - 1].match_num;
                showMatch(previousMatchNum);
            }
        }
        function setActiveMatch(matchNum) {
            var isPractice = document.querySelector("select").value === "practice";
            socket.send(JSON.stringify({ "type": "set_active_match", "payload": { matchNum, isPractice } }));
        }
        function nextMatch(matchNum) {
            var currentIndex = matches.findIndex(m => m.match_num === matchNum);
            if (currentIndex !== -1 && currentIndex < matches.length - 1) {
                var nextMatchNum = matches[currentIndex + 1].match_num;
                showMatch(nextMatchNum);
            }
        }
        function showMatch(matchNum) {
            var match = matches.find(m => m.match_num === matchNum);
            if (match) {
                document.getElementById("current-match-title").innerText = (document.querySelector("select").value === "practice" ? "Practice " : "Match ") + match.match_num;
                document.getElementById("current-match-details").innerText = match.alliance_a + " - " + match.alliance_a_name + " vs. " + match.alliance_b + " - " + match.alliance_b_name + " on " + (match.is_red_table == true ? "ðŸ”´ Red" : "ðŸ”µ Blue") + " table";
                document.getElementById("set-match").onclick = () => setActiveMatch(match.match_num);
                document.getElementById("previous-match").onclick = () => previousMatch(match.match_num);
                document.getElementById("next-match").onclick = () => nextMatch(match.match_num);
            }
        }
        socket.addEventListener("close", (event) => {
            setTimeout(() => {
                socket = new WebSocket((location.protocol === "http:" ? "ws://" : "wss://") + location.host + "/ws");
            }, 1000);
        });
        soundSelect.addEventListener("change", (event) => {
            var soundType = event.target.value;
            socket.send(JSON.stringify({ "type": "play_test_sound", "payload": { soundType } }));
        });
    </script>
</body>

</html>